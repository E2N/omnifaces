/*
 * Copyright 2020 OmniFaces
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package org.omnifaces.resourcehandler;

import static java.lang.Character.isUpperCase;
import static java.lang.Character.toLowerCase;
import static java.nio.charset.StandardCharsets.UTF_8;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.context.SessionScoped;
import jakarta.enterprise.inject.spi.Bean;
import jakarta.faces.application.Resource;
import jakarta.faces.application.ResourceHandler;
import jakarta.faces.view.ViewScoped;

import org.omnifaces.config.OmniFaces;
import org.omnifaces.util.Beans;
import org.omnifaces.util.Json;

/**
 * <p>
 * This {@link ResourceHandler} generates the <code>manifest.json</code> based on any {@link WebAppManifest} found in the
 * runtime classpath.
 *
 * <h2>Usage</h2>
 * <ol>
 * <li>Create a class which extends {@link WebAppManifest} in your web application project.</li>
 * <li>Give it the appropriate CDI scope annotation, e.g {@link ApplicationScoped}, {@link SessionScoped} or even
 * {@link RequestScoped} (note that a {@link ViewScoped} obviously won't work).</li>
 * <li>Override properties accordingly conform the rules in
 * <a href="https://www.w3.org/TR/appmanifest/">the W3 spec</a>.</li>
 * <li>Note: you do not need to explicitly register this resource handler. It's already automatically registered.</li>
 * </ol>
 * <p>
 * Here's a concrete example:
 * <pre>
 * package com.example;
 *
 * import jakarta.enterprise.context.ApplicationScoped;
 * import java.util.Arrays;
 * import java.util.Collection;
 *
 * import org.omnifaces.resourcehandler.WebAppManifest;
 *
 * &#64;ApplicationScoped
 * public class ExampleWebAppManifest extends WebAppManifest {
 *
 *     &#64;Override
 *     public String getName() {
 *         return "Example Application Name";
 *     }
 *
 *     &#64;Override
 *     public String getShortName() {
 *         return "EAN";
 *     }
 *
 *     &#64;Override
 *     public Collection&lt;ImageResource&gt; getIcons() {
 *         return Arrays.asList(
 *             ImageResource.of("logo.svg"),
 *             ImageResource.of("logo-120x120.png", Size.SIZE_120),
 *             ImageResource.of("logo-180x180.png", Size.SIZE_180),
 *             ImageResource.of("logo-192x192.png", Size.SIZE_192),
 *             ImageResource.of("logo-512x512.png", Size.SIZE_512)
 *         );
 *     }
 *
 *     &#64;Override
 *     public String getThemeColor() {
 *         return "#cc9900";
 *     }
 *
 *     &#64;Override
 *     public String getBackgroundColor() {
 *         return "#ffffff";
 *     }
 *
 *     &#64;Override
 *     public Display getDisplay() {
 *         return Display.STANDALONE;
 *     }
 *
 *     &#64;Override
 *     public Collection&lt;Category&gt; getCategories() {
 *         return Arrays.asList(Category.BUSINESS, Category.FINANCE);
 *     }
 *
 *     &#64;Override
 *     public Collection&lt;RelatedApplication&gt; getRelatedApplications() {
 *         return Arrays.asList(
 *             RelatedApplication.of(Platform.PLAY, "https://play.google.com/store/apps/details?id=com.example.app1", "com.example.app1"),
 *             RelatedApplication.of(Platform.ITUNES, "https://itunes.apple.com/app/example-app1/id123456789")
 *         );
 *     }
 * }
 * </pre>
 * <p>
 * Finally reference it in your template exactly as follows, with the exact library name of <code>omnifaces</code> and
 * exact resource name of <code>manifest.json</code>. You cannot change these values.
 * <pre>
 * &lt;link rel="manifest" href="#{resource['omnifaces:manifest.json']}" crossorigin="use-credentials" /&gt;
 * </pre>
 * <p>
 * The <code>crossorigin</code> attribute is optional, you can drop it, but it's mandatory if you've put the
 * {@link SessionScoped} annotation on your {@link WebAppManifest} bean, else the browser won't retain the session
 * cookies while downloading the <code>manifest.json</code> and then this resource handler won't be able to maintain the
 * cachability. See next section.
 *
 * <h2>Caching</h2>
 * <p>
 * Basically, the CDI scope annotation being used is determinative for the autogenerated <code>v=</code> query
 * parameter indicating the last modified timestamp. If you make your {@link WebAppManifest} bean {@link RequestScoped},
 * then it'll change on every request and the browser will be forced to re-download it. If you can however guarantee
 * that the properties of your {@link WebAppManifest} are static, and thus you can safely make it
 * {@link ApplicationScoped}, then the <code>v=</code> query parameter will basically represent the timestamp of
 * the first time the bean is instantiated.
 *
 * @author Bauke Scholtz
 * @since 3.6
 * @see <a href="https://www.w3.org/TR/appmanifest">https://www.w3.org/TR/appmanifest</a>
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/Manifest">https://developer.mozilla.org/en-US/docs/Web/Manifest</a>
 */
public class WebAppManifestResourceHandler extends DefaultResourceHandler {

	public static final String RESOURCE_NAME = "manifest.json";

	private Bean<WebAppManifest> manifestBean;
	private byte[] contents;
	private long lastModified;

	/**
	 * Creates a new instance of this web app manifest resource handler which wraps the given resource handler.
	 * This will also try to resolve the concrete implementation of {@link WebAppManifest}.
	 * @param wrapped The resource handler to be wrapped.
	 */
	public WebAppManifestResourceHandler(ResourceHandler wrapped) {
		super(wrapped);
		manifestBean = Beans.resolve(WebAppManifest.class); // Unfortunately, @Inject isn't yet supported in ResourceHandler.
	}

	@Override
	public Resource decorateResource(Resource resource, String resourceName, String libraryName) {
		if (manifestBean == null || !(OmniFaces.OMNIFACES_LIBRARY_NAME.equals(libraryName) && RESOURCE_NAME.equals(resourceName))) {
			return resource;
		}

		WebAppManifest manifest = Beans.getInstance(manifestBean, false);

		if (manifest == null || contents == null) {
			manifest = Beans.getInstance(manifestBean, true);
			this.contents = Json.encode(manifest, WebAppManifestResourceHandler::camelCaseToSnakeCase).getBytes(UTF_8);
			this.lastModified = System.currentTimeMillis();
		}

		return new DynamicResource(resourceName, libraryName, "application/json") {
			@Override
			public InputStream getInputStream() throws IOException {
				return new ByteArrayInputStream(contents);
			}

			@Override
			public long getLastModified() {
				return lastModified;
			}
		};
	}

	private static String camelCaseToSnakeCase(String string) {
		return string.codePoints().collect(StringBuilder::new, (sb, cp) -> {
			if (isUpperCase(cp)) {
				sb.append('_').appendCodePoint(toLowerCase(cp));
			}
			else {
				sb.appendCodePoint(cp);
			}
		}, (sb1, sb2) -> {}).toString();
	}
}